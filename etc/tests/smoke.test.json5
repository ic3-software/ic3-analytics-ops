{
  name: "Demo",
  restApiURL: "http://localhost:8282/icCube/api",
  authenticator: {
    user: "${analytics.ops.user}",
    password: "${analytics.ops.password}"
  },
  // An optional duration : actor's tasks are executed in a loop for this duration or once.
  // duration: "PT1m",
  actors: [
    {
      name: "Demo Test",
      active: true,
      // Optional overriding the one defined at test level.
      restApiURL: "http://localhost:8282/icCube/api",
      // Optional overriding the one defined at test level.
      authenticator: {
        user: "${analytics.ops.user}",
        password: "${analytics.ops.password}"
      },
      tasks: [
        {
          action: "ClearResultCache"
          // Both OpenReport and PrintReport are possibly using MDX results from the result cache.
        },
        {
          action: "ServerStatus",
          // By default, assert the server is returning a status but can assert version : exact match for now.
          assertions: [
            {
              // serverVersionEx: "8.4.10+26-Mar-2024 12:46:10 UTC",
              // dashboardsVersionEx: "8.4.10-alpha.1+Thu, 14 Mar 2024 12:48:56 GMT",
              serverVersion: "8.4.10",
              dashboardsVersion: "8.4.10-alpha.1"
            }
          ]
        },
        {
          action: "UnloadSchema",
          schemaName: "Sales"
          // By default, assert the schema is being unloaded.
        },
        {
          action: "LoadSchema",
          schemaFile: "Sales.icc-schema"
          // By default, assert the schema is being loaded.
        },
        {
          action: "LoadedSchemas",
          schemaName: "Sales"
          // By default, assert the schema is being loaded.
        },
        {
          action: "SchemaInfo",
          schemaFile: "Sales.icc-schema",
          assertions: [
            {
              status: "LOADED"
            }
          ]
        },
        {
          action: "RestoreSchemaSnapshot",
          snapshot: "Sales.icc-schema.2024_03_18_15h57m09.1710773829600"
          // By default, assert the schema is being loaded.
        },
        {
          action: "RestoreSchemaBackup",
          schemaName: "Sales",
          timestamp: "2024-04-03 12-56-34 517 UTC"
          // By default, assert the schema is being loaded.
        },
        {
          // An optional name identifying the task in reports (defaulted to action if none).
          name: "mdx-equals",
          action: "MDX",
          schema: "Sales",
          statement: "select TopCount( [Customers].[Geography].[Region], 3, [Measures].[Count] ) on 0 from [Sales]",
          assertions: [
            {
              equals: {
                statement: "select Head( Order( [Customers].[Geography].[Region], [Measures].[Count], BDESC ), 3) on 0 from [Sales]"
              }
            }
          ]
        },
        {
          // An optional name identifying the task in reports (defaulted to action if none).
          name: "mdx-cell-equals",
          action: "MDX",
          schema: "Sales",
          statement: "select from [Sales] filterby [Customers].[Geography].[Region].[Europe]",
          assertions: [
            {
              cellEquals: {
                statement: "select [Customers].[Geography].[Region].[Europe] on 0 from [Sales]"
              }
            }
          ]
        },
        {
          // An optional name identifying the task in reports (defaulted to action if none).
          name: "mdx-statement-on-error",
          action: "MDX",
          schema: "Sales",
          statement: "select from Sales where x",
          assertions: [
            {
              statementOnError: {
                errorCode: "OLAP_UNKNOWN_DIMENSION_HIERARCHY"
              }
            }
          ]
        },
        {
          // An optional name identifying the task in reports (defaulted to action if none).
          name: "script-on-error",
          action: "MDX",
          schema: "Sales",
          statement: "with select from Sales where x",
          assertions: [
            {
              statementOnError: {
                errorCode: "MDX_PARSE_MISSING_MEMBER_SET_WITH"
              }
            }
          ]
        },
        {
          // An optional name identifying the task in reports (defaulted to action if none).
          name: "mdx-cell-on-error",
          action: "MDX",
          schema: "Sales",
          statement: "with x as Error('ouch') select from Sales where x",
          assertions: [
            {
              // Assuming a single-cell result.
              cellOnError: {
                errorCode: "OLAP_MDX_ERROR_FUNCTION"
              }
            }
          ]
        },
        {
          action: "MDXes",
          data: "data/sales",
          schema: "Sales"
          // Assert non-regression from expected results.
        }
      ]
    },
    {
      name: "Dashboard Printer",
      active: false,
      tasks: [
        {
          action: "PrintReport",
          reportPath: "shared:/ic3-analytics-ops",
          pageSize: "A4"
          // By default, assert the report PDF has been successfully generated.
        }
      ]
    },
    {
      name: "Dashboard Opener",
      active: false,
      tasks: [
        {
          action: "OpenReport",
          reportPath: "shared:/ic3-analytics-ops"
        }
      ]
    },
    {
      name: "Non-Regression Generator",
      active: false,
      tasks: [
        {
          action: "GenerateMDXes",
          data: "data-new/sales-new",
          schema: "Sales",
          statements: [
            "select from sales",
            "select from [Sales] filterby [Customers].[Geography].[Region].[Europe]"
          ]
        }
      ]
    },
    {
      name: "Non-Regression Generator (Player)",
      active: false,
      tasks: [
        {
          action: "MDXes",
          data: "data-new/sales-new",
          schema: "Sales"
        }
      ]
    }
  ]
}